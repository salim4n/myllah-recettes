@page "/recipeDetails/{id:int}"
@inject NavigationManager Navigation
@inject RecipeStore RecipeStore
@implements IDisposable
@attribute [Authorize]

<div class="container pt-4 pt-md-5">
	@if (RecipeStore.RecipesListState is not null)
	{
		<div class="row pb-4">
			<div class="col-sm-6 mb-2 mb-sm-0">
				<button class="btn btn-danger form-control rounded-pill"
					@onclick="()=>handleDelete()">
					Supprimer
				</button>
			</div>
			<div class="col-sm-6">
				<button class="btn btn-warning form-control rounded-pill"
					@onclick="()=>NavigateToUpdateRecipe()">
					Modifier
				</button>
			</div>
		</div>
		<div class="row container bg-taupe rounded-pill text-center p-3 m-3">
			<h1 class="text-white">@RecipeStore?.RecipeState.Name</h1>
		</div>
		<div class="row">
			<div class="col-md-5">
				<img src="@RecipeStore?.RecipeState.ImageUri"
					 class="img-fluid rounded-circle"
					 alt="@RecipeStore.RecipeState.Name" />
			</div>
			<div class="col-md-7">
				<div class="card bg-taupe text-center">
					<div class="card-body text-white">@((MarkupString?)@RecipeStore?.RecipeState.Description)</div>
				</div>
				<br />
			</div>
		</div>
	}
	else
	{
		<Loader />
	}
</div>

@code {
	[Parameter]
	public int Id { get; set; }

	bool deleteSuccess = false;

	protected override void OnParametersSet()
	{
		if (Id == default)
		{
			Navigation.NavigateTo("/");
		}
		else
		{
			RecipeStore.GetRecipe(Id);
			RecipeStore.OnStateChange += StateHasChanged;
		}
	}

	protected async Task handleDelete()
	{
		await RecipeStore.DeleteRecipe(RecipeStore.RecipeState);
		RecipeStore.OnStateChange += StateHasChanged;
		Navigation.NavigateTo("/");
	}

	protected void NavigateToUpdateRecipe()
	{
		Navigation.NavigateTo($"/updateRecipe/{Id}");
	}

	public void Dispose()
	{
		RecipeStore.OnStateChange -= StateHasChanged;
	}
}

<style>
	img {
		max-width: 100%;
		height: auto;
	}

	a {
		color: white !important;
	}

	a:hover {
			color: white !important;
		}
</style>
