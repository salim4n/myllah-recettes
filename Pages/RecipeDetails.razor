@page "/recipeDetails/{id:int}"
@inject NavigationManager Navigation
@inject RecipeStore RecipeStore
@implements IDisposable

<div class="container pt-4 pt-md-5">
	@if(RecipeStore.RecipesState is not null)
	{
		<div class="row pb-4">
			<div class="col-6">
				<button class="btn btn-danger form-control rounded-pill"
				@onclick="()=>handleDelete()">
					Supprimer
				</button>
			</div>
			<div class="col-6">
				<button class="btn btn-warning blanc form-control rounded-pill">
					Modifier
				</button>
			</div>
		</div>
		<div class="row container bg-taupe rounded-pill text-center p-3 m-3">
			<h1 class=" blanc">@RecipeStore?.RecipeState.Name</h1>
		</div>
		<div class="row">
			<div class="col-7">
				<div class="list-group bg-taupe text-center">
					<div class="blanc">@((MarkupString?)@RecipeStore?.RecipeState.Description)</div>
				</div>
				<br />
			</div>
			<div class="col-5">
				<img src="@RecipeStore?.RecipeState.ImageUri"
					 width="100%"
					 alt="@RecipeStore.RecipeState.Name" />
			</div>
		</div>
	}
	else
	{
		<Loader/>
	}

		</div>

@code {
	[Parameter]
	public int Id { get; set; }

	bool deleteSuccess = false;

	protected override void OnParametersSet()
	{
		if (Id == default)
		{
			Navigation.NavigateTo("/");
		}
		else
		{
			RecipeStore.GetRecipe(Id);
			RecipeStore.OnStateChange += StateHasChanged;
		
		}
	}

	protected  async Task handleDelete()
	{
		await RecipeStore.DeleteRecipe(RecipeStore.RecipeState);
		RecipeStore.OnStateChange += StateHasChanged;
		Navigation.NavigateTo("/");

	}

	protected async Task handleUpdate()
	{
		//Navigation.NavigateTo("",)
	}

	public void Dispose()
	{
		RecipeStore.OnStateChange -= StateHasChanged;
	}
}

<style>
	img{
		border-radius: 50%;
		height: 500px;
		object-fit:cover;
	}
</style>
