@page "/updateRecipe/{id:int}"
@using System.Net.Http
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Nav
@inject HttpClient http
@inject IJSRuntime JSRuntime
@inject RecipeStore RecipeStore
@inject IRecipeService RecipeService
@attribute [Authorize]

<h1 class="taupe text-lg-center">Modifier la Recette</h1>
<div class="row">
    <PopMessage message="@errorMessage"/>
</div>

<EditForm Model="@recipe" OnValidSubmit="@SendRecipeToApi">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="d-flex align-items-center justify-content-center pb-4">
        <button type="submit"
                class="btn blanc bg-taupe rounded-pill">@(isLoading ? "Modification en cours..." : "Modifier la recette")
    </button>
    </div>
    <div class="row">
        <div class="mb-3 col-6">
            <label for="name" class="form-label taupe">Nom</label>
            <InputText class="form-control" id="name" @bind-Value="recipeToUpdate.Name" />
            <ValidationMessage For="@(() => recipeToUpdate.Name)" />
        </div>
        <div class="mb-3 col-6">
            <label for="file" class="form-label taupe">Nouvelle Photo de votre recette</label>
            <InputFile class="form-control" id="file"
            OnChange="@HandleFileChange" />
            <ValidationMessage For="@(() => recipe.File)" />
        </div>
    </div>

    <div class="mb-3 col-6">
        <label for="description" class="form-label taupe">Description</label>
        <InputTextArea class="form-control" @bind-Value="recipeToUpdate.Description" />
        <ValidationMessage For="@(() => recipeToUpdate.Description)" />
    </div>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }
    private UpdateRecipeModel recipe = new();
    private Recipe recipeToUpdate = new();
    User? user;
    private bool isLoading = false;
    string errorMessage = string.Empty;


    protected override async Task OnInitializedAsync()
    {

        recipeToUpdate = RecipeStore.RecipesListState
        .FirstOrDefault(r => r.Id == Id);
    }

    private async Task SendRecipeToApi()
    {
        recipe.Id = Id;
        recipe.Name = recipeToUpdate.Name;
        recipe.Description = recipeToUpdate.Description;
        isLoading = true;
        var recipeUpdated = await RecipeService.UpdateRecipe(recipe);
        isLoading = false;
        if (recipeUpdated.Id is not 0)
        {
            RecipeStore.RecipesListState.Add(recipeUpdated);
            RecipeStore.OnStateChange += StateHasChanged;
            Nav.NavigateTo("/recipeDetails/"+recipeUpdated.Id);
        }
        else
            errorMessage = "Echec de modification de la recette";
    
    }

    public void Dispose()
    {
        RecipeStore.OnStateChange -= StateHasChanged;
    }


    private void HandleFileChange(InputFileChangeEventArgs e)
    {
        recipe.File = e.File;
    }
}


